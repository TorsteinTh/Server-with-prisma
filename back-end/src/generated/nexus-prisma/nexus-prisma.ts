/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Todo: TodoObject
      TodoConnection: TodoConnectionObject
      PageInfo: PageInfoObject
      TodoEdge: TodoEdgeObject
      AggregateTodo: AggregateTodoObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      TodoSubscriptionPayload: TodoSubscriptionPayloadObject
      TodoPreviousValues: TodoPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Todo: TodoFieldDetails
      TodoConnection: TodoConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      TodoEdge: TodoEdgeFieldDetails
      AggregateTodo: AggregateTodoFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      TodoSubscriptionPayload: TodoSubscriptionPayloadFieldDetails
      TodoPreviousValues: TodoPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      TodoWhereUniqueInput: TodoWhereUniqueInputInputObject
      TodoWhereInput: TodoWhereInputInputObject
      TodoCreateInput: TodoCreateInputInputObject
      TodoUpdateInput: TodoUpdateInputInputObject
      TodoUpdateManyMutationInput: TodoUpdateManyMutationInputInputObject
      TodoSubscriptionWhereInput: TodoSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    TodoOrderByInput: TodoOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'todo', args?: QueryTodoArgs[] | false, alias?: string  } 
  | { name: 'todoes', args?: QueryTodoesArgs[] | false, alias?: string  } 
  | { name: 'todoesConnection', args?: QueryTodoesConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'todo'
  | 'todoes'
  | 'todoesConnection'


type QueryTodoArgs =
  | 'where'
type QueryTodoesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTodoesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  todo: {
    type: 'Todo'
    args: Record<QueryTodoArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TodoWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Todo | null> | prisma.Todo | null
  }
  todoes: {
    type: 'Todo'
    args: Record<QueryTodoesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TodoWhereInput | null, orderBy?: prisma.TodoOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Todo[]> | prisma.Todo[]
  }
  todoesConnection: {
    type: 'TodoConnection'
    args: Record<QueryTodoesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TodoWhereInput | null, orderBy?: prisma.TodoOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TodoConnection> | prisma.TodoConnection
  }
}
  

// Types for Todo

type TodoObject =
  | TodoFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'checked', args?: [] | false, alias?: string  } 
  | { name: 'body', args?: [] | false, alias?: string  } 

type TodoFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'checked'
  | 'body'



  

export interface TodoFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  checked: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  body: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TodoConnection

type TodoConnectionObject =
  | TodoConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TodoConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TodoConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TodoConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TodoEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TodoConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TodoEdge[]> | prisma.TodoEdge[]
  }
  aggregate: {
    type: 'AggregateTodo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TodoConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateTodo> | prisma.AggregateTodo
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for TodoEdge

type TodoEdgeObject =
  | TodoEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TodoEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TodoEdgeFieldDetails {
  node: {
    type: 'Todo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TodoEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Todo> | prisma.Todo
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateTodo

type AggregateTodoObject =
  | AggregateTodoFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTodoFields =
  | 'count'



  

export interface AggregateTodoFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createTodo', args?: MutationCreateTodoArgs[] | false, alias?: string  } 
  | { name: 'updateTodo', args?: MutationUpdateTodoArgs[] | false, alias?: string  } 
  | { name: 'updateManyTodoes', args?: MutationUpdateManyTodoesArgs[] | false, alias?: string  } 
  | { name: 'upsertTodo', args?: MutationUpsertTodoArgs[] | false, alias?: string  } 
  | { name: 'deleteTodo', args?: MutationDeleteTodoArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTodoes', args?: MutationDeleteManyTodoesArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createTodo'
  | 'updateTodo'
  | 'updateManyTodoes'
  | 'upsertTodo'
  | 'deleteTodo'
  | 'deleteManyTodoes'


type MutationCreateTodoArgs =
  | 'data'
type MutationUpdateTodoArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTodoesArgs =
  | 'data'
  | 'where'
type MutationUpsertTodoArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTodoArgs =
  | 'where'
type MutationDeleteManyTodoesArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createTodo: {
    type: 'Todo'
    args: Record<MutationCreateTodoArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TodoCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Todo> | prisma.Todo
  }
  updateTodo: {
    type: 'Todo'
    args: Record<MutationUpdateTodoArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TodoUpdateInput, where: TodoWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Todo | null> | prisma.Todo | null
  }
  updateManyTodoes: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTodoesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TodoUpdateManyMutationInput, where?: TodoWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertTodo: {
    type: 'Todo'
    args: Record<MutationUpsertTodoArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TodoWhereUniqueInput, create: TodoCreateInput, update: TodoUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Todo> | prisma.Todo
  }
  deleteTodo: {
    type: 'Todo'
    args: Record<MutationDeleteTodoArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TodoWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Todo | null> | prisma.Todo | null
  }
  deleteManyTodoes: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTodoesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TodoWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'todo', args?: SubscriptionTodoArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'todo'


type SubscriptionTodoArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  todo: {
    type: 'TodoSubscriptionPayload'
    args: Record<SubscriptionTodoArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TodoSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TodoSubscriptionPayload | null> | prisma.TodoSubscriptionPayload | null
  }
}
  

// Types for TodoSubscriptionPayload

type TodoSubscriptionPayloadObject =
  | TodoSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TodoSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TodoSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TodoSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Todo'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TodoSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Todo | null> | prisma.Todo | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TodoPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TodoSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TodoPreviousValues | null> | prisma.TodoPreviousValues | null
  }
}
  

// Types for TodoPreviousValues

type TodoPreviousValuesObject =
  | TodoPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'checked', args?: [] | false, alias?: string  } 
  | { name: 'body', args?: [] | false, alias?: string  } 

type TodoPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'checked'
  | 'body'



  

export interface TodoPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  checked: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  body: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface TodoWhereUniqueInput {
  id?: string | null
}
export type TodoWhereUniqueInputInputObject =
  | Extract<keyof TodoWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface TodoWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  checked?: boolean | null
  checked_not?: boolean | null
  body?: string | null
  body_not?: string | null
  body_in?: string[]
  body_not_in?: string[]
  body_lt?: string | null
  body_lte?: string | null
  body_gt?: string | null
  body_gte?: string | null
  body_contains?: string | null
  body_not_contains?: string | null
  body_starts_with?: string | null
  body_not_starts_with?: string | null
  body_ends_with?: string | null
  body_not_ends_with?: string | null
  AND?: TodoWhereInput[]
  OR?: TodoWhereInput[]
  NOT?: TodoWhereInput[]
}
export type TodoWhereInputInputObject =
  | Extract<keyof TodoWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'checked', alias?: string  } 
  | { name: 'checked_not', alias?: string  } 
  | { name: 'body', alias?: string  } 
  | { name: 'body_not', alias?: string  } 
  | { name: 'body_in', alias?: string  } 
  | { name: 'body_not_in', alias?: string  } 
  | { name: 'body_lt', alias?: string  } 
  | { name: 'body_lte', alias?: string  } 
  | { name: 'body_gt', alias?: string  } 
  | { name: 'body_gte', alias?: string  } 
  | { name: 'body_contains', alias?: string  } 
  | { name: 'body_not_contains', alias?: string  } 
  | { name: 'body_starts_with', alias?: string  } 
  | { name: 'body_not_starts_with', alias?: string  } 
  | { name: 'body_ends_with', alias?: string  } 
  | { name: 'body_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TodoCreateInput {
  id?: string | null
  checked?: boolean
  body?: string
}
export type TodoCreateInputInputObject =
  | Extract<keyof TodoCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'checked', alias?: string  } 
  | { name: 'body', alias?: string  } 
  
export interface TodoUpdateInput {
  checked?: boolean | null
  body?: string | null
}
export type TodoUpdateInputInputObject =
  | Extract<keyof TodoUpdateInput, string>
  | { name: 'checked', alias?: string  } 
  | { name: 'body', alias?: string  } 
  
export interface TodoUpdateManyMutationInput {
  checked?: boolean | null
  body?: string | null
}
export type TodoUpdateManyMutationInputInputObject =
  | Extract<keyof TodoUpdateManyMutationInput, string>
  | { name: 'checked', alias?: string  } 
  | { name: 'body', alias?: string  } 
  
export interface TodoSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TodoWhereInput | null
  AND?: TodoSubscriptionWhereInput[]
  OR?: TodoSubscriptionWhereInput[]
  NOT?: TodoSubscriptionWhereInput[]
}
export type TodoSubscriptionWhereInputInputObject =
  | Extract<keyof TodoSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type TodoOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'checked_ASC'
  | 'checked_DESC'
  | 'body_ASC'
  | 'body_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  